#include <bits/stdc++.h>
#define rep(i, a, b) for(typeof(b) i = a; i < b; i++)
using namespace std;
typedef pair<int, int> ii;
typedef tuple<int, int, int, int, int> iiii;
typedef pair<pair<int, int>, int> iii;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef pair<ll, ii> shape_;
int INF = ~(1 << 31);
#define fs first
#define sc second
#define _x first
#define _y second

// shapes:
//       #  #    #  
//  ###  #  #   ##  ##        ##   #  #   #
//   #   #  #   #   #   ##    #   ##  #   #
//   #   #  ##  #   ##  ###  ##   #   ##  ###

shape_ shapes [10][2][4] = {
    {
        {   
           {(0b0000001 << 14) +
            (0b0000111 << 7) +
            (0b0000001), {3, 3}},
            
           {(0b0000010 << 14) +
            (0b0000010 << 7) +
            (0b0000111), {3, 3}},
            
           {(0b0000100 << 14) +
            (0b0000111 << 7) +
            (0b0000100), {3, 3}},
            
           {(0b0000111 << 14) +
            (0b0000010 << 7) +
            (0b0000010), {3, 3}}
        },
        {
            {0,{0,0}},
            {0,{0,0}},
            {0,{0,0}},
            {0,{0,0}}
        }
    },
    {
        {
           {(0b0000001 << 21) +
            (0b0000001 << 14) +
            (0b0000001 << 7) +
            (0b0000001), {1, 4}},

           {(0b0000000 << 14) +
            (0b0000000 << 7) +
            (0b0001111), {4, 1}},
            {0,{0,0}},
            {0,{0,0}}
        },
        {
            {0,{0,0}},
            {0,{0,0}},
            {0,{0,0}},
            {0,{0,0}}
        }
    },
    {
        {
           {(0b0000001 << 21) +
            (0b0000001 << 14) +
            (0b0000001 << 7) +
            (0b0000011), {2, 4}},

           {(0b0001111 << 7) +
            (0b0000001), {4, 2}},
           
           {(0b0000011 << 21) +
            (0b0000010 << 14) +
            (0b0000010 << 7) +
            (0b0000010), {2, 4}},
           
           {(0b0001000 << 7) +
            (0b0001111), {4, 2}}
        },
        {
           {(0b0000011 << 21) +
            (0b0000001 << 14) +
            (0b0000001 << 7) +
            (0b0000001), {2, 4}},

           {(0b0001111 << 7) +
            (0b0001000), {4, 2}},
           
           {(0b0000010 << 21) +
            (0b0000010 << 14) +
            (0b0000010 << 7) +
            (0b0000011), {2, 4}},
           
           {(0b0000001 << 7) +
            (0b0001111), {4, 2}}
        }
    },
    {
        {
           {(0b0000001 << 21) +
            (0b0000001 << 14) +
            (0b0000011 << 7) +
            (0b0000010), {2, 4}},

           {(0b0001110 << 7) +
            (0b0000011), {4, 2}},
           
           {(0b0000001 << 21) +
            (0b0000011 << 14) +
            (0b0000010 << 7) +
            (0b0000010), {2, 4}},
           
           {(0b0000011 << 7) +
            (0b0001110), {4, 2}}
        },
        {
           {(0b0000010 << 21) +
            (0b0000011 << 14) +
            (0b0000001 << 7) +
            (0b0000001), {2, 4}},

           {(0b0000111 << 7) +
            (0b0001100), {4, 2}},
           
           {(0b0000010 << 21) +
            (0b0000010 << 14) +
            (0b0000011 << 7) +
            (0b0000001), {2, 4}},
           
           {(0b0001100 << 7) +
            (0b0000111), {4, 2}}
        }
    },
    {
        {
           {(0b0000011 << 14) +
            (0b0000001 << 7) +
            (0b0000011), {2, 3}},

           {(0b0000101 << 7) +
            (0b0000111), {3, 2}},
           
           {(0b0000011 << 14) +
            (0b0000010 << 7) +
            (0b0000011), {2, 3}},
           
           {(0b0000111 << 7) +
            (0b0000101), {3, 2}}
        },
        {
            {0,{0,0}},
            {0,{0,0}},
            {0,{0,0}},
            {0,{0,0}}
        }
    },
    {
        {
           {(0b0000011 << 14) +
            (0b0000011 << 7) +
            (0b0000001), {2, 3}},

           {(0b0000011 << 7) +
            (0b0000111), {3, 2}},
           
           {(0b0000010 << 14) +
            (0b0000011 << 7) +
            (0b0000011), {2, 3}},
           
           {(0b0000111 << 7) +
            (0b0000110), {3, 2}}
        },
        {
           {(0b0000001 << 14) +
            (0b0000011 << 7) +
            (0b0000011), {2, 3}},

           {(0b0000110 << 7) +
            (0b0000111), {3, 2}},
           
           {(0b0000011 << 14) +
            (0b0000011 << 7) +
            (0b0000010), {2, 3}},
           
           {(0b0000111 << 7) +
            (0b0000011), {3, 2}}
        }
    },
    {
        {
           {(0b0000110 << 14) +
            (0b0000010 << 7) +
            (0b0000011), {3, 3}},

           {(0b0000001 << 14) +
            (0b0000111 << 7) +
            (0b0000100), {3, 3}},
            {0,{0,0}},
            {0,{0,0}}
        },
        {
           {(0b0000011 << 14) +
            (0b0000010 << 7) +
            (0b0000110), {3, 3}},

           {(0b0000100 << 14) +
            (0b0000111 << 7) +
            (0b0000001), {3, 3}},
            {0,{0,0}},
            {0,{0,0}}
        }
    },
    {
        {
           {(0b0000001 << 14) +
            (0b0000011 << 7) +
            (0b0000010), {2, 3}},

           {(0b0000110 << 7) +
            (0b0000011), {3, 2}},
           
           {(0b0000001 << 14) +
            (0b0000011 << 7) +
            (0b0000010), {2, 3}},
           
           {(0b0000110 << 7) +
            (0b0000011), {3, 2}}
        },
        {
           {(0b0000010 << 14) +
            (0b0000011 << 7) +
            (0b0000001), {2, 3}},

           {(0b0000011 << 7) +
            (0b0000110), {3, 2}},
           
           {(0b0000010 << 14) +
            (0b0000011 << 7) +
            (0b0000001), {2, 3}},
           
           {(0b0000011 << 7) +
            (0b0000110), {3, 2}}
        }
    },
    {
        {
           {(0b0000001 << 14) +
            (0b0000001 << 7) +
            (0b0000011), {2, 3}},

           {(0b0000111 << 7) +
            (0b0000001), {3, 2}},
           
           {(0b0000011 << 14) +
            (0b0000010 << 7) +
            (0b0000010), {2, 3}},
           
           {(0b0000100 << 7) +
            (0b0000111), {3, 2}}
        },
        {
           {(0b0000011 << 14) +
            (0b0000001 << 7) +
            (0b0000001), {2, 3}},

           {(0b0000111 << 7) +
            (0b0000100), {3, 2}},
           
           {(0b0000010 << 14) +
            (0b0000010 << 7) +
            (0b0000011), {2, 3}},
           
           {(0b0000001 << 7) +
            (0b0000111), {3, 2}}
        }
    },
    {
        {
           {(0b0000001 << 14) +
            (0b0000001 << 7) +
            (0b0000111), {3, 3}},

           {(0b0000111 << 14) +
            (0b0000001 << 7) +
            (0b0000001), {3, 3}},
           
           {(0b0000111 << 14) +
            (0b0000100 << 7) +
            (0b0000100), {3, 3}},
           
           {(0b0000100 << 14) +
            (0b0000100 << 7) +
            (0b0000111), {3, 3}}
        },
        {
            
            {0,{0,0}},
            {0,{0,0}},
            {0,{0,0}},
            {0,{0,0}}
        }
    }
};




ll res = 1;
ll res2 = 1;

ll map_ = 
(0b0001111LL << 49) +
(0b0000000LL << 42) +
(0b0000000LL << 35) +
(0b0000000LL << 28) +
(0b0000000LL << 21) +
(0b0000000LL << 14) +
(0b1000000LL << 7) +
(0b1000000LL);

int type[8][7] = {
    {0, 0, 0, 0, 0, 0,-1},
    {0, 0, 0, 0, 0, 0,-1},
    {1, 1, 1, 1, 1, 1, 1},
    {1, 1, 1, 1, 1, 1, 1},
    {1, 1, 1, 1, 1, 1, 1},
    {1, 1, 1, 1, 1, 1, 1},
    {1, 1, 1, 2, 2, 2, 2},
   {-1,-1,-1,-1, 2, 2, 2}
};

string values[8][7] = {
    {"Jan", "Feb", "Mar", "Apr", "May", "Jun", ""},
    {"Jul", "Aug", "Sep", "Oct", "Nov", "Dec",""},
    {"1", "2", "3", "4", "5", "6", "7"},
    {"8", "9", "10", "11", "12", "13", "14"},
    {"15", "16", "17", "18", "19", "20", "21"},
    {"22", "23", "24", "25", "26", "27", "28"},
    {"29", "30", "31", "Sun", "Mon", "Thue", "Wed"},
    {"", "", "", "", "Thur", "Fri", "Sat"}
};


void print_(ll out){
    int c = 1;
    while(out != 0){
        cout << (out & 1LL);
        out /= 2;
        if(c == 7){
            cout << endl;
            c = 0;
        }
        c++;
    }
    cout << endl;
}

bool check(int x, int y, int shape, int rotation, int side){
    shape_ v = shapes[shape][side][rotation];
    if(v.first == 0){
        return false;
    }
    if(v.second._x + y > 7 || v.second._y + x > 8){
        return false;
    }
    ll new_ = v.first << y;
    new_ = new_ << x * 7;
    // cout << new_ << endl;    

    return (new_ & map_) == 0;
};


void set_(int x, int y, int shape, int rotation, int side){
    shape_ v = shapes[shape][side][rotation];

    ll new_ = v.first << y;
    new_ = new_ << x * 7;
    map_ = map_ ^ new_;
    // print_(map_);
    // cout << endl;
};

string find_res(){
    int i = 0;
    string res[3];
    ll new_ = map_;
    rep(x, 0, 8){
        rep(y, 0, 7){
            // cout << (new_ & 1LL) << endl;
            // print_(new_);
            if((new_ & 1LL) == 0){
                if(i != type[x][y]){
                    return "";
                }
                res[i] = values[x][y];
                i++;
            }
            new_ /= 2;
        }
    }
    return res[2] + ", " + res[0] + " " + res[1];
}

ll rcount = 0;
void f(int c){
    if(c == 2){
        cout << "b---" << res << " " << res2 << "---" << endl;
    }
    rep(i, 0, 2){
        rep(j, 0, 4){
            if(c == 0 && j == 0){
                j = 2;
            }
            rep(x, 0, 8){
                if(c == 0 && j == 2 && x == 0){
                    x = 3;
                }
                rep(y, 0, 7){
                    if(c == 0 && j == 2 && x == 3 && y == 0){
                        y = 2;
                    }
                    if(rcount > 20000000){
                        cout << "rcount overflow";
                        return;
                    }
                    if(!check(x, y, c, j, i)){
                        continue;
                    }
                    set_(x, y, c, j, i);
                    if(c < 5){
                        res *= 10;
                        res += x;
                        res *= 10;
                        res += y;
                        res *= 10;
                        res += i * 4 + j;
                    }else{
                        res2 *= 10;
                        res2 += x;
                        res2 *= 10;
                        res2 += y;
                        res2 *= 10;
                        res2 += i * 4 + j;
                    }
                    if(c == 9){
                        string r = find_res();
                        if(r != ""){
                            cout << res << " " << res2 << " " << r << endl;
                            rcount++;
                            // print_(map_);
                        }
                    }else{
                        f(c + 1);
                    }
                    if(c < 5){
                        res /= 1000;
                    }else{
                        res2 /= 1000;
                    }
                    set_(x, y, c, j, i);
                }
            }
        }
    }
    if(c == 2){
        cout << "e---" << res << " " << res2 << "---" << endl;
    }
}

int main(){
    f(0);
}